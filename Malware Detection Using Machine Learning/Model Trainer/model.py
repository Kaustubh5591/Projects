import pandas as pd
import matplotlib.pyplot as plt
import os
import pandas
import numpy
import pickle
import pefile
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
import joblib
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn import svm
import sklearn.metrics as metrics




dataset = pd.read_csv('data.csv', sep='|')

dataset.head()    #Top 5 row of the dataset

dataset.tail()     #Last 5 row of the dataset

dataset.columns    # name of the columns

dataset.describe(include="all")    # summary of numeric attributes

dataset.info()    # info about the whole dataset

dataset["legitimate"].value_counts()    # count of malware (0) and benign (1) files in dataset




dataset["legitimate"].value_counts().plot(kind="pie",autopct="%1.1f%%")
plt.show()

# Feature
X = dataset.drop(['Name','md5','legitimate'],axis=1).values    #Droping this because classification model will not accept object type elements (float and int only)
# Target variable
y = dataset['legitimate'].values

extratrees = ek.ExtraTreesClassifier().fit(X,y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nbfeatures = X_new.shape[1]

#Number of important features
nbfeatures

#splitting the data (70% - training and 30% - testing)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_new, y ,test_size=0.29, stratify = y)


features = []
index = numpy.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]


for f in range(nbfeatures):
    print("%d. feature %s (%f)" % (f + 1, dataset.columns[2+index[f]], extratrees.feature_importances_[index[f]]))
    features.append(dataset.columns[2+f])


model = { "DecisionTree": DecisionTreeClassifier(max_depth=10),
         "RandomForest":ek.RandomForestClassifier(n_estimators=50)}

results = {}
for algo in model:
    clf = model[algo]
    clf.fit(X_train,y_train)
    score = clf.score(X_test,y_test)
    print ("%s : %s " %(algo, score))
    results[algo] = score

winner = max(results, key=results.get)# Selecting the classifier with good result
print("Using", winner, "for classification, with",len(features), 'features.')

joblib.dump(model[winner],'classifier.pkl')
open('features.pkl', 'wb').write(pickle.dumps(features))

# Load classifier
clf = joblib.load('classifier.pkl')
#load features
features = pickle.loads(open(os.path.join('features.pkl'),'rb').read())